plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //로그 출력 p6spy
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.0'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // guava
    implementation 'com.google.guava:guava:32.1.2-jre'

    // actuator && prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    // commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    // 메일 전송 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // embedded-redis
    compileOnly group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'
    testImplementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 설정
def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}
clean {
    delete file('src/main/generated')
}

// 테스트 환경변수
test {
    environment 'AUTH_TOKEN_SECRET_KEY', 'defaultSecretKeyForTestsdefaultSecretKeyForTests'
}

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') {
    QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
        "**/*Config*",
        "**/*Exception*",
        "**/*Req*",
        "**/*Res*",
        "**/*Request*",
        "**/*Response*",
        "**/*Dto*",
        "**/*Interceptor*",
        "**/*Filter*",
        "**/*Resolver*",
        "**/*Entity*",
        "**/test/**",
        "**/resources/**"
]

def coverageExcludes = []
coverageExcludes.addAll(["generated.*"])
coverageExcludes.addAll(QDomains)
coverageExcludes.addAll(jacocoExcludePatterns)


// 공통 변수 추출
def jacocoReportsDir = "${project.buildDir}/reports/jacoco/test"
def jacocoTestReportXml = "${jacocoReportsDir}/jacocoTestReport.xml"

jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = false

        html.outputLocation.set(file("${jacocoReportsDir}/html"))
        xml.outputLocation.set(file(jacocoTestReportXml))
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: coverageExcludes)
            })
    )

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0
            }

            excludes = coverageExcludes
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "GangEunzzang_MoneyMinder"
        property "sonar.organization", "gangeunzzang"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReportXml
    }
}
